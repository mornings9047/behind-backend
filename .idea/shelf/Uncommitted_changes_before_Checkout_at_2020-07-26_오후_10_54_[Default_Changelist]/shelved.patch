Index: behind/src/main/kotlin/com/yourssu/behind/service/post/function/ImgUploadFunction.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yourssu.behind.service.post.function\r\n\r\nimport org.springframework.web.multipart.MultipartFile\r\nimport java.io.File\r\nimport java.util.*\r\n\r\nclass ImgUploadFunction {\r\n    fun storeImg(file: MultipartFile): String {\r\n        val directory = File(\"C:\\\\Users\\\\82102\\\\Desktop\\\\2020_behind_backend\\\\uploads\")\r\n        val fileName: String = file.originalFilename + UUID.randomUUID().toString()\r\n\r\n        if (!directory.exists())\r\n            directory.mkdir()\r\n\r\n        val filePath = \"${directory.absolutePath}/${fileName}.jpeg\"\r\n        val target = File(filePath)\r\n        file.transferTo(target)\r\n\r\n        return \"img/${fileName}.jpeg\"\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- behind/src/main/kotlin/com/yourssu/behind/service/post/function/ImgUploadFunction.kt	(revision 3451314e2a10e7ffd8f86c4eef7c7550db3da2e7)
+++ behind/src/main/kotlin/com/yourssu/behind/service/post/function/ImgUploadFunction.kt	(date 1595758549118)
@@ -6,7 +6,7 @@
 
 class ImgUploadFunction {
     fun storeImg(file: MultipartFile): String {
-        val directory = File("C:\\Users\\82102\\Desktop\\2020_behind_backend\\uploads")
+        val directory = File("../uploads")
         val fileName: String = file.originalFilename + UUID.randomUUID().toString()
 
         if (!directory.exists())
Index: behind/src/main/kotlin/com/yourssu/behind/repository/comment/CommentRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yourssu.behind.repository.comment\r\n\r\nimport com.yourssu.behind.model.entity.comment.Comment\r\nimport com.yourssu.behind.model.entity.post.Post\r\nimport com.yourssu.behind.model.entity.user.User\r\nimport org.springframework.data.jpa.repository.JpaRepository\r\nimport org.springframework.stereotype.Repository\r\nimport java.util.*\r\n\r\n@Repository\r\ninterface CommentRepository : JpaRepository<Comment, Long> {\r\n    fun findByUserAndPost(user: User, post: Post): Optional<List<Comment>>\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- behind/src/main/kotlin/com/yourssu/behind/repository/comment/CommentRepository.kt	(revision 3451314e2a10e7ffd8f86c4eef7c7550db3da2e7)
+++ behind/src/main/kotlin/com/yourssu/behind/repository/comment/CommentRepository.kt	(date 1595771675424)
@@ -6,8 +6,10 @@
 import org.springframework.data.jpa.repository.JpaRepository
 import org.springframework.stereotype.Repository
 import java.util.*
+import javax.swing.text.html.Option
 
 @Repository
 interface CommentRepository : JpaRepository<Comment, Long> {
     fun findByUserAndPost(user: User, post: Post): Optional<List<Comment>>
+    fun findByUser(user:User) :Optional<List<Comment>>
 }
Index: behind/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\r\nspring.datasource.url=jdbc:mysql://localhost:3306/behind?serverTimezone=UTC&characterEncoding=UTF-8\r\nspring.datasource.username=\r\nspring.datasource.password=\r\nspring.jpa.database=mysql\r\nspring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect\r\nspring.jpa.show-sql=true\r\nspring.jpa.hibernate.ddl-auto=update\r\nspring.servlet.multipart.enabled=true\r\nspring.servlet.multipart.max-file-size=1MB\r\nspring.servlet.multipart.max-request-size=1MB\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>x-windows-949
===================================================================
--- behind/src/main/resources/application.properties	(revision 3451314e2a10e7ffd8f86c4eef7c7550db3da2e7)
+++ behind/src/main/resources/application.properties	(date 1595758585169)
@@ -1,7 +1,7 @@
 spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
 spring.datasource.url=jdbc:mysql://localhost:3306/behind?serverTimezone=UTC&characterEncoding=UTF-8
-spring.datasource.username=
-spring.datasource.password=
+spring.datasource.username=root
+spring.datasource.password=asd159753
 spring.jpa.database=mysql
 spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect
 spring.jpa.show-sql=true
Index: behind/src/main/kotlin/com/yourssu/behind/controller/user/UserController.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- behind/src/main/kotlin/com/yourssu/behind/controller/user/UserController.kt	(date 1595770065676)
+++ behind/src/main/kotlin/com/yourssu/behind/controller/user/UserController.kt	(date 1595770065676)
@@ -0,0 +1,17 @@
+package com.yourssu.behind.controller.user
+
+import com.yourssu.behind.model.dto.post.response.ResponsePostDto
+import com.yourssu.behind.model.dto.post.response.ResponsePostsDto
+import com.yourssu.behind.model.entity.post.PostSearch
+import com.yourssu.behind.service.UserService
+import org.springframework.beans.factory.annotation.Autowired
+import org.springframework.web.bind.annotation.*
+
+@RestController
+@RequestMapping("/user")
+class UserController @Autowired constructor(val userService: UserService) {
+    @GetMapping("{userId}/post")
+    fun getUserRelatedPost(@PathVariable userId: Long, @RequestParam findType: PostSearch): List<ResponsePostsDto> {
+        return userService.findUserRelatedPost(userId, findType)
+    }
+}
\ No newline at end of file
Index: behind/src/main/kotlin/com/yourssu/behind/service/UserService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- behind/src/main/kotlin/com/yourssu/behind/service/UserService.kt	(date 1595771628112)
+++ behind/src/main/kotlin/com/yourssu/behind/service/UserService.kt	(date 1595771628112)
@@ -0,0 +1,21 @@
+package com.yourssu.behind.service
+
+import com.yourssu.behind.exception.user.UserNotExistsException
+import com.yourssu.behind.model.dto.post.response.ResponsePostDto
+import com.yourssu.behind.model.dto.post.response.ResponsePostsDto
+import com.yourssu.behind.model.entity.post.PostSearch
+import com.yourssu.behind.repository.comment.CommentRepository
+import com.yourssu.behind.repository.user.UserRepository
+import org.springframework.beans.factory.annotation.Autowired
+import org.springframework.stereotype.Service
+
+@Service
+class UserService @Autowired constructor(val userRepository: UserRepository,val commentRepository: CommentRepository) {
+
+    fun findUserRelatedPost(userId: Long, type: PostSearch): List<ResponsePostsDto> {
+        val user = userRepository.findById(userId).orElseThrow { UserNotExistsException() }
+
+        return user.scrapPost.map { ResponsePostsDto(it) }
+
+    }
+}
\ No newline at end of file
Index: behind/src/main/kotlin/com/yourssu/behind/model/entity/post/PostSearch.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- behind/src/main/kotlin/com/yourssu/behind/model/entity/post/PostSearch.kt	(date 1595769195845)
+++ behind/src/main/kotlin/com/yourssu/behind/model/entity/post/PostSearch.kt	(date 1595769195845)
@@ -0,0 +1,5 @@
+package com.yourssu.behind.model.entity.post
+
+enum class PostSearch {
+    COMMENT, SCRAP, LIKE
+}
\ No newline at end of file
